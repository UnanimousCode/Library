-- CREATED BY UC#8523

-- SERVICES

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local TpService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- VARIABLES

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/UnanimousCode/Library/main/Source"))()
local player = game.Players.LocalPlayer

-- FUNCTIONS

local function FindPlayer(name)
	local nametofind = string.lower(name)
	local plr = nil
	local prevMax = math.huge
	if name ~= "" and name ~= nil then
		for _, player in pairs(game.Players:GetPlayers()) do
			local playername = string.lower(player.Name)
			local displayname = string.lower(player.DisplayName)
			if string.find(displayname, name) or string.find(playername, name) then
				plr = player
				break
			end
		end
	end
	return plr
end

-- CODE

local MyLibrary = library:NewGui()

-- Local Tab
local LocalTab = MyLibrary:CreateTab({
	title = "Local Player",
	icon = "rbxassetid://12094157128" or nil,
	buttoncount = 12
})

local LocalPlayerTitle = MyLibrary:CreateInfo({
	target = LocalTab,
	title = "Local Player"
})

-- Walkspeed
local WalkspeedSlider = MyLibrary:CreateSlider({
	target = LocalTab,
	title = "Walkspeed",
	default = 16,
	max = 150
})
WalkspeedSlider:SetCallback(function(value)
	player.Character.Humanoid.WalkSpeed = value
end)
WalkspeedSlider:SetValue(player.Character.Humanoid.WalkSpeed)

-- Jumppower
local JumpSlider = MyLibrary:CreateSlider({
	target = LocalTab,
	title = "Jumppower",
	default = player.Character.Humanoid.JumpPower,
	min = 0,
	max = 200,
	callback = function(value)
		player.Character.Humanoid.JumpPower = value
	end
})

-- Spawnpoints
local Spawnpoint = nil
local SetSpawnpoint = MyLibrary:CreateButton({
	target = LocalTab,
	title = "Set Spawnpoint"
})
SetSpawnpoint:SetCallback(function()
	if player.Character then
		local root = player.Character:FindFirstChild("HumanoidRootPart")
		if root then
			Spawnpoint = root.CFrame
			SetSpawnpoint:SetText("Set Spawnpoint: ("..library:Round(Spawnpoint.X)..","..library:Round(Spawnpoint.Y)..","..library:Round(Spawnpoint.Z)..")")
		end
	end
end)
local RemoveSpawnpoint = MyLibrary:CreateButton({
	target = LocalTab,
	title = "Remove Spawnpoint"
})
RemoveSpawnpoint:SetCallback(function()
	Spawnpoint = nil
	SetSpawnpoint:SetText("Set Spawnpoint")
end)
player.CharacterAdded:Connect(function(NewCharacter)
	if Spawnpoint then
		repeat wait(0.2) until NewCharacter:FindFirstChild("HumanoidRootPart")
		local root = NewCharacter:FindFirstChild("HumanoidRootPart")
		root.CFrame = Spawnpoint
	end
end)

-- Noclip
local Noclipping = false
local Noclip = nil
local NoclipToggle = MyLibrary:CreateToggle({
    target = LocalTab,
    title = "No-Clip",
    callback = function(val)
        Noclipping = val
        if Noclipping then
            Noclip = RunService.Stepped:Connect(function()
                for _, child in pairs(player.Character:GetChildren()) do
                    if child:IsA("BasePart") and child.CanCollide == true then
                        child.CanCollide = false
                    end
                end
            end)
        else
            Noclip:Disconnect()
        end
    end
})

-- TP Keybind
local TpKeybind = MyLibrary:CreateKeybindButton({
    target = LocalTab,
    title = "TP Keybind",
    callback = function()
        if not UserInputService:GetFocusedTextBox() then
            player.Character.HumanoidRootPart.CFrame = CFrame.new(mousepos+Vector3.new(0,1,0))
        end
    end
})

-- Teleport to player
local PlayerTp = MyLibrary:CreateButton({
    target = LocalTab,
    title = "Teleport to Player",
    arguments = {"playername"},
    callback = function(args)
       pcall(function()
           player.Character.HumanoidRootPart.CFrame = FindPlayer(args["playername"]).Character.HumanoidRootPart.CFrame
       end)
    end
})

-- View player
local ViewingPlayer = false
local ViewPlayer = MyLibrary:CreateToggle({
    target = LocalTab,
    title = "View Player",
    arguments = {"playername"},
    callback = function(val, args)
        ViewingPlayer = val
        if not ViewingPlayer then
            workspace.CurrentCamera.CameraSubject = player.Character
        else
            pcall(function()
                workspace.CurrentCamera.CameraSubject = FindPlayer(args["playername"]).Character
            end)
        end 
    end
})

-- Bang player
local Banging = false
local BangSpeed = 2
local BangAnimation = Instance.new("Animation")
BangAnimation.AnimationId = "rbxassetid://148840371"
local BangTrack = nil
local BangConnection = nil
local BangPlayer = MyLibrary:CreateToggle({
    target = LocalTab,
    title = "Bang",
    arguments = {"playername"},
    callback = function(value,args)
        banging = value
        if banging then
            BangTrack = player.Character.Humanoid:LoadAnimation(BangAnimation)
            BangTrack:Play(0.1,1,BangSpeed)
            local BangPlayer = FindPlayer(args["playername"])
            if BangPlayer then
                BangConnection = RunService.Stepped:Connect(function()
                    pcall(function()
                        player.Character.HumanoidRootPart.CFrame = BangPlayer.Character.HumanoidRootPart.CFrame*CFrame.new(0,0,1.1)
                    end)
                end)
            end
        else
            BangTrack:Stop()
            BangTrack = nil
            if BangConnection then
                BangConnection:Disconnect()
                BangConnection = nil
            end
        end
    end
})
local BangSlider = MyLibrary:CreateSlider({
    target = LocalTab,
    title = "Bang Speed",
    min = 1,
    max = 10,
    default = BangSpeed,
    callback = function(speed)
       BangSpeed = speed
       if BangTrack then
          BangTrack:AdjustSpeed(BangSpeed) 
       end
    end
})
